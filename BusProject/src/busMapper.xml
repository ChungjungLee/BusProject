<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 버스정보 처리 SQL -->
<mapper namespace="bus.dao.BusMapper">
	
	<!-- 계정 정보 저장 -->
	<insert id="insertAccount" parameterType="account">
		INSERT INTO account
			(id, pw)
		VALUES
			(#{id}, #{pw})
	</insert>
	
	
	<!-- 계정 정보 가져오기 -->
	<select id="selectAccount" parameterType="string" resultType="account">
		SELECT
			*
		FROM
			account
		WHERE
			id = #{id}
	</select>
	
	<!-- 버스 정보 저장 -->
	<insert id="insertBus" parameterType="bus">
		INSERT /*+ IGNORE_ROW_ON_DUPKEY_INDEX (bus(routId)) */ INTO bus
			(routId
			,routName
			,routType)
		VALUES
			(#{routId}
			,#{routName}
			,#{routType})
	</insert>
	
	
	<!-- 해당 버스 정보 가져오기 -->
	<select id="selectBus" parameterType="int" resultType="bus">
		SELECT
			*
		FROM
			bus
		WHERE
			routId = #{routId}
	</select>
	
	
	<!-- 특정 번호를 포함하는 버스 정보 가져오기 -->
	<select id="selectBusContainsNum" parameterType="string" resultType="bus">
		SELECT
			*
		FROM
			bus
		WHERE
			routName LIKE '%' || #{busNum} || '%'
	</select>
	
	
	<!-- 정류장 정보 저장 -->
	<insert id="insertStation" parameterType="station">
		INSERT /*+ IGNORE_ROW_ON_DUPKEY_INDEX (station(stnId)) */ INTO station
			(stnId, arsId, stnName)
		VALUES
			(#{stnId}, #{arsId}, #{stnName})
	</insert>
	
	
	<!-- 정류장 정보 가져오기 -->
	<select id="selectStation" parameterType="int" resultType="station">
		SELECT
			*
		FROM
			station
		WHERE
			stnId = #{stnId}
	</select>
	
	
	<!-- 즐겨찾기 저장 -->
	<insert id="insertFavorite" parameterType="favorite">
		INSERT INTO favorite
			(userId, busOrStnId, busOrStnType)
		VALUES
			(#{userId}, #{busOrStnId}, #{busOrStnType})
	</insert>
	
	
	<!-- 즐겨찾기 버스 정보 가져오기 -->
	<select id="selectFavoriteBus" parameterType="string" resultType="bus">
		SELECT
			b.routId		AS routId,
			b.routName		AS routName,
			b.routType		AS routType,
			b.stnFirst		AS stnFirst,
			b.stnLast		AS stnLast,
			b.timeFirst		AS timeFirst,
			b.timeLast		AS timeLast,
			b.satTimeFirst	AS satTimeFirst,
			b.satTimeLast	AS satTimeLast,
			b.holTimeFirst	AS holTimeFirst,
			b.holTimeLast	AS holTimeLast,
			b.norTerms		AS norTerms,
			b.satTerms		AS satTerms,
			b.holTerms		AS holTerms,
			b.companyNm		AS companyNm,
			b.telNo			AS telNo,
			b.faxNo			AS faxNo,
			b.email			AS email
		FROM
			bus b, favorite f
		WHERE
			f.userId = #{userId} AND
			f.busOrStnType = 'B' AND
			f.busOrStnId = b.routId
	</select>
	
	
	<!-- 즐겨찾기 정류장 정보 가져오기 -->
	<select id="selectFavoriteStn" parameterType="string" resultType="station">
		SELECT
			s.stnId		AS stnId,
			s.arsId		AS arsId,
			s.stnName	AS stnName
		FROM
			station s, favorite f
		WHERE
			f.userId = #{userId} AND
			f.busOrStnType = 'S' AND
			f.busOrStnId = s.stnId
	</select>
	
	
	<!-- 즐겨찾기 모든 정보 가져오기 -->
	<select id="selectFavorite" parameterType="string" resultType="favorite">
		SELECT
			*
		FROM
			favorite
		WHERE
			userId = #{userId}
	</select>
	
	
	<!-- 즐겨찾기 정보 지우기 -->
	<delete id="deleteFavorite" parameterType="int">
		DELETE FROM
			favorite
		WHERE
			busOrStnId = #{busOrStnId}
	</delete>
	
	
	<!-- 검색 기록 저장 -->
	<insert id="insertHistory" parameterType="history">
		INSERT INTO history
			(userId, busOrStnId, busOrStnType)
		VALUES
			(#{userId}, #{busOrStnId}, #{busOrStnType})
	</insert>
	
	
	<!-- 검색 기록 가져오기 -->
	<select id="selectHistory" parameterType="string" resultType="history">
		SELECT
			*
		FROM
			history
		WHERE
			userId = #{userId}
		ORDER BY
			indate DESC
	</select>
	
	
	<!-- 검색 기록 업데이트하기 -->
	<update id="updateHistory" parameterType="history">
		UPDATE
			history
		SET
			indate = SYSDATE
		WHERE
			userId = #{userId} AND
			busOrStnId = #{busOrStnId}
	</update>
	
</mapper>

















